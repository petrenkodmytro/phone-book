{"version":3,"file":"static/js/432.1561e922.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.styled.jsx","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReegisterFormWrapp = styled.div`\n  width: 390px;\n  padding: 20px;\n  margin-bottom: 30px;\n  border: 1px solid ${props => props.theme.colors.accentDark};\n  border-radius: 5px;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  box-shadow: -1px -1px 5px #fff, 1px 1px 5px ${p => p.theme.colors.accentDark};\n`;\n\nexport const RegisterFormBtn = styled.button`\n  width: 200px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n  padding: 5px;\n  margin-left: auto;\n  margin-right: auto;\n  border-radius: 5px;\n  border: none;\n  background-color: ${p => p.theme.colors.accentLight};\n  transition: all 0.2s ease-in-out;\n  :hover,\n  :focus {\n    background-color: ${p => p.theme.colors.accentDark};\n    color: #fff;\n    box-shadow: -2px -2px 5px #fff,\n      2px 2px 5px ${p => p.theme.colors.accentDark};\n    svg {\n      fill: #fff;\n      stroke: #fff;\n    }\n  }\n`;\n","import { Formik, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { register } from 'redux/auth/auth-operations';\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\nimport { TextField, InputAdornment, IconButton } from '@mui/material';\nimport { ReegisterFormWrapp, RegisterFormBtn } from './RegisterForm.styled';\nimport { selectErrorAuth } from 'redux/auth/auth-selectors';\nimport { Text } from 'components/ContactList/ContactList.styled';\n\nconst RegisterSchema = Yup.object({\n  name: Yup.string()\n    .min(5, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Name is required!'),\n  email: Yup.string('Enter your email')\n    .email('Enter a valid email')\n    .required('Email is required!'),\n  password: Yup.string('Enter your password')\n    .min(8, 'Password should be of minimum 8 characters length')\n    .required('Password is required'),\n});\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  const [showPassword, setShowPassword] = useState(false);\n  const error = useSelector(selectErrorAuth);\n  const handlePasswordVisibility = () => {\n    setShowPassword(prevShowPassword => !prevShowPassword);\n  };\n\n  return (\n    <>\n      <ReegisterFormWrapp>\n        <Formik\n          initialValues={{\n            name: '',\n            email: '',\n            password: '',\n          }}\n          validationSchema={RegisterSchema}\n          onSubmit={({ ...values }, actions) => {\n            dispatch(register({ ...values }));\n            actions.resetForm();\n          }}\n        >\n          {({ handleSubmit }) => (\n            <form onSubmit={handleSubmit}>\n              <Field name=\"name\">\n                {({ field, form: { touched, errors } }) => (\n                  <TextField\n                    {...field}\n                    label=\"Name\"\n                    variant=\"outlined\"\n                    error={touched.name && Boolean(errors.name)}\n                    helperText={touched.name && errors.name}\n                    fullWidth\n                    margin=\"normal\"\n                    autoComplete=\"off\"\n                    size=\"small\"\n                  />\n                )}\n              </Field>\n\n              <Field name=\"email\">\n                {({ field, form: { touched, errors } }) => (\n                  <TextField\n                    {...field}\n                    label=\"Email\"\n                    variant=\"outlined\"\n                    error={touched.email && Boolean(errors.email)}\n                    helperText={touched.email && errors.email}\n                    fullWidth\n                    margin=\"normal\"\n                    autoComplete=\"off\"\n                    size=\"small\"\n                  />\n                )}\n              </Field>\n\n              <Field name=\"password\">\n                {({ field, form: { touched, errors } }) => (\n                  <TextField\n                    {...field}\n                    type={showPassword ? 'text' : 'password'}\n                    label=\"Password\"\n                    variant=\"outlined\"\n                    error={touched.password && Boolean(errors.password)}\n                    helperText={touched.password && errors.password}\n                    fullWidth\n                    margin=\"normal\"\n                    size=\"small\"\n                    autoComplete=\"off\"\n                    sx={{ mb: 2 }}\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <IconButton onClick={handlePasswordVisibility}>\n                            {showPassword ? <VisibilityOff /> : <Visibility />}\n                          </IconButton>\n                        </InputAdornment>\n                      ),\n                    }}\n                  />\n                )}\n              </Field>\n\n              <RegisterFormBtn type=\"submit\">Register</RegisterFormBtn>\n            </form>\n          )}\n        </Formik>\n      </ReegisterFormWrapp>\n      {/* помилка запиту */}\n      {error && <Text>{error}</Text>}\n    </>\n  );\n};\n","const { RegisterForm } = require('components/RegisterForm/RegisterForm');\n\nconst RegisterPage = () => {\n  return <RegisterForm />;\n};\n\nexport default RegisterPage;\n"],"names":["ReegisterFormWrapp","styled","props","theme","colors","accentDark","p","RegisterFormBtn","accentLight","RegisterSchema","Yup","name","min","max","required","email","password","RegisterForm","dispatch","useDispatch","useState","showPassword","setShowPassword","error","useSelector","selectErrorAuth","handlePasswordVisibility","prevShowPassword","initialValues","validationSchema","onSubmit","actions","values","register","resetForm","handleSubmit","field","form","touched","errors","TextField","label","variant","Boolean","helperText","fullWidth","margin","autoComplete","size","type","sx","mb","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","VisibilityOff","Visibility","require"],"sourceRoot":""}