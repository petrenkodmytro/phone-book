{"version":3,"file":"static/js/637.52d5e882.chunk.js","mappings":"+SAEaA,EAAiBC,EAAAA,GAAAA,IAAH,mPAIL,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,UAAvB,IAKqB,SAAAC,GAAC,OAAIA,EAAEH,MAAMC,OAAOC,UAAnB,IAGpCE,EAAeN,EAAAA,GAAAA,OAAH,meAWH,SAAAK,GAAC,OAAIA,EAAEH,MAAMC,OAAOI,WAAnB,IAIC,SAAAF,GAAC,OAAIA,EAAEH,MAAMC,OAAOC,UAAnB,IAGL,SAAAC,GAAC,OAAIA,EAAEH,MAAMC,OAAOC,UAAnB,I,SCxBfI,EAAcC,EAAAA,GAAW,CAC7BC,MAAOD,EAAAA,GAAW,oBACfC,MAAM,uBACNC,SAAS,qBACZC,SAAUH,EAAAA,GAAW,uBAClBI,IAAI,EAAG,qDACPF,SAAS,0BAGDG,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAA2B,WAC/BD,GAAgB,SAAAE,GAAgB,OAAKA,CAAL,GACjC,EACD,OACE,SAACtB,EAAD,WACE,SAAC,KAAD,CACEuB,cAAe,CACbZ,MAAO,GACPE,SAAU,IAEZW,iBAAkBf,EAClBgB,SAAU,WAAgBC,GAAa,IAAvBC,EAAsB,oBACpCX,GAASY,EAAAA,EAAAA,KAAM,UAAKD,KACpBD,EAAQG,WACT,EATH,SAWG,gBAAGC,EAAH,EAAGA,aAAH,OACC,kBAAML,SAAUK,EAAhB,WACE,SAAC,KAAD,CAAOC,KAAK,QAAZ,SACG,gBAAGC,EAAH,EAAGA,MAAH,IAAUC,KAAQC,EAAlB,EAAkBA,QAASC,EAA3B,EAA2BA,OAA3B,OACC,SAACC,EAAA,GAAD,kBACMJ,GADN,IAEEK,MAAM,QACNC,QAAQ,WACRC,MAAOL,EAAQvB,OAAS6B,QAAQL,EAAOxB,OACvC8B,WAAYP,EAAQvB,OAASwB,EAAOxB,MACpC+B,WAAS,EACTC,OAAO,SACPC,aAAa,MACbC,KAAK,UAVR,KAeH,SAAC,KAAD,CAAOd,KAAK,WAAZ,SACG,gBAAGC,EAAH,EAAGA,MAAH,IAAUC,KAAQC,EAAlB,EAAkBA,QAASC,EAA3B,EAA2BA,OAA3B,OACC,SAACC,EAAA,GAAD,kBACMJ,GADN,IAEEc,KAAM3B,EAAe,OAAS,WAC9BkB,MAAM,WACNC,QAAQ,WACRC,MAAOL,EAAQrB,UAAY2B,QAAQL,EAAOtB,UAC1C4B,WAAYP,EAAQrB,UAAYsB,EAAOtB,SACvC6B,WAAS,EACTC,OAAO,SACPC,aAAa,MACbC,KAAK,QACLE,GAAI,CAAEC,GAAI,GACVC,WAAY,CACVC,cACE,SAACC,EAAA,EAAD,CAAgBC,SAAS,MAAzB,UACE,SAACC,EAAA,EAAD,CAAYC,QAASjC,EAArB,SACGF,GAAe,SAACoC,EAAA,EAAD,KAAoB,SAACC,EAAA,EAAD,WAjB/C,KA0BH,SAACjD,EAAD,CAAcuC,KAAK,SAAnB,sBA7CH,KAmDR,C,2CCxFO/B,EAAc0C,EAAQ,MAAtB1C,UAMR,UAJkB,WAChB,OAAO,SAACA,EAAD,GACR,C","sources":["components/LoginForm/LoginForm.styled.jsx","components/LoginForm/LoginForm.jsx","pages/LoginPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const LoginFormWrapp = styled.div`\n  width: 390px;\n  padding: 20px;\n  margin-bottom: 30px;\n  border: 1px solid ${props => props.theme.colors.accentDark};\n  border-radius: 5px;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  box-shadow: -1px -1px 5px #fff, 1px 1px 5px ${p => p.theme.colors.accentDark};\n`;\n\nexport const LoginFormBtn = styled.button`\n  width: 200px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n  padding: 5px;\n  margin-left: auto;\n  margin-right: auto;\n  border-radius: 5px;\n  border: none;\n  background-color: ${p => p.theme.colors.accentLight};\n  transition: all 0.2s ease-in-out;\n  :hover,\n  :focus {\n    background-color: ${p => p.theme.colors.accentDark};\n    color: #fff;\n    box-shadow: -2px -2px 5px #fff,\n      2px 2px 5px ${p => p.theme.colors.accentDark};\n    svg {\n      fill: #fff;\n      stroke: #fff;\n    }\n  }\n`;\n","import { Formik, Field } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/auth-operations';\nimport { useState } from 'react';\nimport * as Yup from 'yup';\nimport { TextField, InputAdornment, IconButton } from '@mui/material';\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\nimport { LoginFormBtn, LoginFormWrapp } from './LoginForm.styled';\nconst LogInSchema = Yup.object({\n  email: Yup.string('Enter your email')\n    .email('Enter a valid email')\n    .required('Email is required'),\n  password: Yup.string('Enter your password')\n    .min(8, 'Password should be of minimum 8 characters length')\n    .required('Password is required'),\n});\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handlePasswordVisibility = () => {\n    setShowPassword(prevShowPassword => !prevShowPassword);\n  };\n  return (\n    <LoginFormWrapp>\n      <Formik\n        initialValues={{\n          email: '',\n          password: '',\n        }}\n        validationSchema={LogInSchema}\n        onSubmit={({ ...values }, actions) => {\n          dispatch(logIn({ ...values }));\n          actions.resetForm();\n        }}\n      >\n        {({ handleSubmit }) => (\n          <form onSubmit={handleSubmit}>\n            <Field name=\"email\">\n              {({ field, form: { touched, errors } }) => (\n                <TextField\n                  {...field}\n                  label=\"Email\"\n                  variant=\"outlined\"\n                  error={touched.email && Boolean(errors.email)}\n                  helperText={touched.email && errors.email}\n                  fullWidth\n                  margin=\"normal\"\n                  autoComplete=\"off\"\n                  size=\"small\"\n                />\n              )}\n            </Field>\n\n            <Field name=\"password\">\n              {({ field, form: { touched, errors } }) => (\n                <TextField\n                  {...field}\n                  type={showPassword ? 'text' : 'password'}\n                  label=\"Password\"\n                  variant=\"outlined\"\n                  error={touched.password && Boolean(errors.password)}\n                  helperText={touched.password && errors.password}\n                  fullWidth\n                  margin=\"normal\"\n                  autoComplete=\"off\"\n                  size=\"small\"\n                  sx={{ mb: 2 }}\n                  InputProps={{\n                    endAdornment: (\n                      <InputAdornment position=\"end\">\n                        <IconButton onClick={handlePasswordVisibility}>\n                          {showPassword ? <VisibilityOff /> : <Visibility />}\n                        </IconButton>\n                      </InputAdornment>\n                    ),\n                  }}\n                />\n              )}\n            </Field>\n\n            <LoginFormBtn type=\"submit\">Log In</LoginFormBtn>\n          </form>\n        )}\n      </Formik>\n    </LoginFormWrapp>\n  );\n};\n","const { LoginForm } = require('components/LoginForm/LoginForm');\n\nconst LoginPage = () => {\n  return <LoginForm />;\n};\n\nexport default LoginPage;\n"],"names":["LoginFormWrapp","styled","props","theme","colors","accentDark","p","LoginFormBtn","accentLight","LogInSchema","Yup","email","required","password","min","LoginForm","dispatch","useDispatch","useState","showPassword","setShowPassword","handlePasswordVisibility","prevShowPassword","initialValues","validationSchema","onSubmit","actions","values","logIn","resetForm","handleSubmit","name","field","form","touched","errors","TextField","label","variant","error","Boolean","helperText","fullWidth","margin","autoComplete","size","type","sx","mb","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","VisibilityOff","Visibility","require"],"sourceRoot":""}